// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as UI_CoreTypes from "./UI_CoreTypes.bs.js";

function valueOfDevice(value) {
  if (value === "md") {
    return "960px";
  } else if (value === "sm") {
    return "600px";
  } else if (value === "xl") {
    return "1920px";
  } else if (value === "xs") {
    return "375px";
  } else if (value === "xxs") {
    return "0px";
  } else {
    return "1280px";
  }
}

function greaterThan(current, device, styles) {
  return "\n  " + current + "\n  @media (min-width: " + valueOfDevice(device) + ") {\n    " + styles + "\n  }\n  ";
}

function lessThan(current, device, styles) {
  return "\n  " + current + "\n  @media (max-width: " + valueOfDevice(device) + ") {\n    " + styles + "\n  }\n  ";
}

function all(v) {
  return [{
            NAME: "xxs",
            VAL: v
          }];
}

function xxs(v) {
  return {
          NAME: "xxs",
          VAL: v
        };
}

function xs(v) {
  return {
          NAME: "xs",
          VAL: v
        };
}

function sm(v) {
  return {
          NAME: "sm",
          VAL: v
        };
}

function md(v) {
  return {
          NAME: "md",
          VAL: v
        };
}

function lg(v) {
  return {
          NAME: "lg",
          VAL: v
        };
}

function xl(v) {
  return {
          NAME: "xl",
          VAL: v
        };
}

function valueByDevice(record, device) {
  if (device === "md") {
    return record.md;
  } else if (device === "sm") {
    return record.sm;
  } else if (device === "xl") {
    return record.xl;
  } else if (device === "xs") {
    return record.xs;
  } else if (device === "xxs") {
    return record.xxs;
  } else {
    return record.lg;
  }
}

function createStyles(values, device) {
  return Belt_Array.reduce(values, "", (function (styles, param) {
                var key = param[0];
                return Belt_Option.getWithDefault(Belt_Option.map(valueByDevice(param[1], device), (function (value) {
                                  return "\n      " + styles + "\n      " + key + ": " + value + ";\n      ";
                                })), styles);
              }));
}

function createResponsiveStyles(display, justifyContent, flexDirection, alignItems, flexGrow, flexShrink, order, alignSelf, p, px, py, pt, pb, pl, pr, m, mx, my, mt, mb, ml, mr, textAlign, letterSpacing, lineHeight, width, height, minW, minH, maxW, maxH, position, top, bottom, left, right, zIndex, boxSizing, param) {
  var values = [
    [
      "display",
      UI_CoreTypes.stringify(display)
    ],
    [
      "justify-content",
      UI_CoreTypes.stringify(justifyContent)
    ],
    [
      "align-items",
      UI_CoreTypes.stringify(alignItems)
    ],
    [
      "align-self",
      UI_CoreTypes.stringifyAlignSelf(alignSelf)
    ],
    [
      "flex-direction",
      UI_CoreTypes.stringify(flexDirection)
    ],
    [
      "flex-grow",
      UI_CoreTypes.stringifyGrow(flexGrow)
    ],
    [
      "flex-shrink",
      UI_CoreTypes.stringifyShrink(flexShrink)
    ],
    [
      "order",
      UI_CoreTypes.stringifyOrder(order)
    ],
    [
      "padding",
      UI_CoreTypes.stringifySpacing(p)
    ],
    [
      "padding-left",
      UI_CoreTypes.stringifySpacing(px)
    ],
    [
      "padding-right",
      UI_CoreTypes.stringifySpacing(px)
    ],
    [
      "padding-top",
      UI_CoreTypes.stringifySpacing(py)
    ],
    [
      "padding-bottom",
      UI_CoreTypes.stringifySpacing(py)
    ],
    [
      "padding-top",
      UI_CoreTypes.stringifySpacing(pt)
    ],
    [
      "padding-bottom",
      UI_CoreTypes.stringifySpacing(pb)
    ],
    [
      "padding-left",
      UI_CoreTypes.stringifySpacing(pl)
    ],
    [
      "padding-right",
      UI_CoreTypes.stringifySpacing(pr)
    ],
    [
      "margin",
      UI_CoreTypes.stringifySpacing(m)
    ],
    [
      "margin-left",
      UI_CoreTypes.stringifySpacing(mx)
    ],
    [
      "margin-right",
      UI_CoreTypes.stringifySpacing(mx)
    ],
    [
      "margin-top",
      UI_CoreTypes.stringifySpacing(my)
    ],
    [
      "margin-bottom",
      UI_CoreTypes.stringifySpacing(my)
    ],
    [
      "margin-top",
      UI_CoreTypes.stringifySpacing(mt)
    ],
    [
      "margin-bottom",
      UI_CoreTypes.stringifySpacing(mb)
    ],
    [
      "margin-left",
      UI_CoreTypes.stringifySpacing(ml)
    ],
    [
      "margin-right",
      UI_CoreTypes.stringifySpacing(mr)
    ],
    [
      "text-align",
      UI_CoreTypes.stringify(textAlign)
    ],
    [
      "letter-spacing",
      UI_CoreTypes.stringifySize(letterSpacing)
    ],
    [
      "line-height",
      UI_CoreTypes.stringifySize(lineHeight)
    ],
    [
      "width",
      UI_CoreTypes.stringifySize(width)
    ],
    [
      "height",
      UI_CoreTypes.stringifySize(height)
    ],
    [
      "min-width",
      UI_CoreTypes.stringifySize(minW)
    ],
    [
      "min-height",
      UI_CoreTypes.stringifySize(minH)
    ],
    [
      "max-width",
      UI_CoreTypes.stringifySize(maxW)
    ],
    [
      "max-height",
      UI_CoreTypes.stringifySize(maxH)
    ],
    [
      "position",
      UI_CoreTypes.stringify(position)
    ],
    [
      "top",
      UI_CoreTypes.stringifySize(top)
    ],
    [
      "bottom",
      UI_CoreTypes.stringifySize(bottom)
    ],
    [
      "left",
      UI_CoreTypes.stringifySize(left)
    ],
    [
      "right",
      UI_CoreTypes.stringifySize(right)
    ],
    [
      "z-index",
      UI_CoreTypes.stringify(zIndex)
    ],
    [
      "box-sizing",
      UI_CoreTypes.stringify(boxSizing)
    ]
  ];
  var xxsStyles = createStyles(values, "xxs");
  var xsStyles = createStyles(values, "xs");
  var smStyles = createStyles(values, "sm");
  var mdStyles = createStyles(values, "md");
  var lgStyles = createStyles(values, "lg");
  var xlStyles = createStyles(values, "xl");
  return greaterThan(greaterThan(greaterThan(greaterThan(greaterThan(greaterThan("", "xxs", xxsStyles), "xs", xsStyles), "sm", smStyles), "md", mdStyles), "lg", lgStyles), "xl", xlStyles);
}

export {
  valueOfDevice ,
  greaterThan ,
  lessThan ,
  all ,
  xxs ,
  xs ,
  sm ,
  md ,
  lg ,
  xl ,
  valueByDevice ,
  createStyles ,
  createResponsiveStyles ,
  
}
/* No side effect */
