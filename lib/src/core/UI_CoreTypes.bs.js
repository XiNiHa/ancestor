// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";

var emptyBreakpointsRecord = {
  xxs: undefined,
  xs: undefined,
  sm: undefined,
  md: undefined,
  lg: undefined,
  xl: undefined
};

function parseRecord(stringify, record, value) {
  var variant = value.NAME;
  if (variant === "md") {
    return {
            xxs: record.xxs,
            xs: record.xs,
            sm: record.sm,
            md: Curry._1(stringify, value.VAL),
            lg: record.lg,
            xl: record.xl
          };
  } else if (variant === "sm") {
    return {
            xxs: record.xxs,
            xs: record.xs,
            sm: Curry._1(stringify, value.VAL),
            md: record.md,
            lg: record.lg,
            xl: record.xl
          };
  } else if (variant === "xl") {
    return {
            xxs: record.xxs,
            xs: record.xs,
            sm: record.sm,
            md: record.md,
            lg: record.lg,
            xl: Curry._1(stringify, value.VAL)
          };
  } else if (variant === "xs") {
    return {
            xxs: record.xxs,
            xs: Curry._1(stringify, value.VAL),
            sm: record.sm,
            md: record.md,
            lg: record.lg,
            xl: record.xl
          };
  } else if (variant === "xxs") {
    return {
            xxs: Curry._1(stringify, value.VAL),
            xs: record.xs,
            sm: record.sm,
            md: record.md,
            lg: record.lg,
            xl: record.xl
          };
  } else {
    return {
            xxs: record.xxs,
            xs: record.xs,
            sm: record.sm,
            md: record.md,
            lg: Curry._1(stringify, value.VAL),
            xl: record.xl
          };
  }
}

function toRecord(values, stringify) {
  if (values !== undefined) {
    return Belt_Array.reduce(values, emptyBreakpointsRecord, (function (param, param$1) {
                  return parseRecord(stringify, param, param$1);
                }));
  } else {
    return emptyBreakpointsRecord;
  }
}

function stringify(values) {
  return toRecord(values, (function (prim) {
                return prim;
              }));
}

function stringifyAlignSelf(values) {
  return toRecord(values, (function (value) {
                if (value.NAME !== "two") {
                  return value.VAL;
                }
                var match = value.VAL;
                return match[0] + " " + match[1];
              }));
}

function stringifyFlexValue(values) {
  return toRecord(values, (function (value) {
                if (typeof value === "object" && value.NAME === "number") {
                  return value.VAL.toString();
                } else {
                  return value;
                }
              }));
}

function stringifySpacing(values) {
  return toRecord(values, (function (v) {
                return (v << 3).toString() + "}rem";
              }));
}

function stringifySize(values) {
  return toRecord(values, (function (size) {
                var variant = size.NAME;
                if (variant === "px") {
                  return size.VAL.toString() + "px";
                } else if (variant === "pct") {
                  return size.VAL.toString() + "%";
                } else if (variant === "rem") {
                  return size.VAL.toString() + "rem";
                } else {
                  return size.VAL.toString() + "rem";
                }
              }));
}

var stringifyGrow = stringifyFlexValue;

var stringifyShrink = stringifyFlexValue;

var stringifyOrder = stringifyFlexValue;

export {
  emptyBreakpointsRecord ,
  parseRecord ,
  toRecord ,
  stringify ,
  stringifyAlignSelf ,
  stringifyFlexValue ,
  stringifyGrow ,
  stringifyShrink ,
  stringifyOrder ,
  stringifySpacing ,
  stringifySize ,
  
}
/* No side effect */
